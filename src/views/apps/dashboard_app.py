from PyQt5.QtWidgets import (QVBoxLayout, QHBoxLayout, QPushButton, QLabel, 
                             QFrame, QGridLayout, QProgressBar, QGroupBox,
                             QScrollArea, QWidget)
from PyQt5.QtCore import Qt, QTimer
from PyQt5.QtGui import QFont
import sqlite3
import os
from datetime import datetime, timedelta

from views.apps.base_app import BaseApp
from database.db_manager import DatabaseManager

class DashboardApp(BaseApp):
    """Dashboard principal con datos reales del sistema"""
    
    def __init__(self):
        super().__init__()
        self.db_manager = DatabaseManager()
        self.setup_ui()
        self.load_real_data()
        
        # Timer para actualizaciones autom√°ticas
        self.update_timer = QTimer()
        self.update_timer.timeout.connect(self.load_real_data)
        self.update_timer.start(30000)  # Actualizar cada 30 segundos
        
    def get_title(self):
        return "Dashboard"
        
    def get_icon(self):
        return "üìä"
        
    def setup_ui(self):
        """Configurar la interfaz del dashboard"""
        layout = QVBoxLayout(self)
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(20)
        
        # T√≠tulo y bot√≥n de actualizar
        header_layout = QHBoxLayout()
        
        title = QLabel("üìä Dashboard del Sistema")
        title.setStyleSheet("""
            QLabel {
                font-size: 24px;
                font-weight: bold;
                color: #2c3e50;
            }
        """)
        header_layout.addWidget(title)
        
        header_layout.addStretch()
        
        self.btn_refresh = QPushButton("üîÑ Actualizar")
        self.btn_refresh.setStyleSheet("""
            QPushButton {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 4px;
                font-weight: bold;
            }
            QPushButton:hover {
                background-color: #2980b9;
            }
        """)
        self.btn_refresh.clicked.connect(self.load_real_data)
        header_layout.addWidget(self.btn_refresh)
        
        layout.addLayout(header_layout)
        
        # Grid de m√©tricas PRINCIPALES
        self.metrics_grid = self.create_metrics_grid()
        layout.addLayout(self.metrics_grid)
        
        # Secci√≥n de gr√°ficos y actividad
        content_layout = QHBoxLayout()
        
        # Columna izquierda - Gr√°ficos
        left_column = QVBoxLayout()
        self.charts_section = self.create_charts_section()
        left_column.addWidget(self.charts_section)
        left_column.addStretch()
        
        # Columna derecha - Actividad
        right_column = QVBoxLayout()
        self.activity_section = self.create_activity_section()
        right_column.addWidget(self.activity_section)
        right_column.addStretch()
        
        content_layout.addLayout(left_column)
        content_layout.addLayout(right_column)
        layout.addLayout(content_layout)
        
        layout.addStretch()
        
    def create_metrics_grid(self):
        """Crear grid de m√©tricas principales con datos din√°micos"""
        grid = QGridLayout()
        grid.setSpacing(15)

        # Tarjetas de m√©tricas
        self.metric_libros = self.create_metric_card(
            "Total de Libros", "0", "#27ae60", "Cargando..."
        )
        grid.addWidget(self.metric_libros, 0, 0)    
        self.metric_consultas = self.create_metric_card(
            "Total de Consultas", "0", "#2980b9", "Cargando..."
        )
        grid.addWidget(self.metric_consultas, 0, 1)
        self.metric_fragmentos = self.create_metric_card(
            "Total de Fragmentos", "0", "#8e44ad", "Cargando..."
        )
        grid.addWidget(self.metric_fragmentos, 0, 2)
        self.metric_espacio = self.create_metric_card(
            "Espacio en BD", "0 MB", "#c0392b", "Cargando..."
        )
        
        return grid
        
    def create_metric_card(self, title: str, value: str, color: str, subtitle: str = ""):
        """Crear una tarjeta de m√©trica individual"""
        card = QFrame()
        card.setStyleSheet(f"""
            QFrame {{
                background-color: white;
                border: 1px solid #ddd;
                border-radius: 8px;
                padding: 10px;
                min-height: 50px;
            }}
            QFrame:hover {{
                border: 1px solid {color};
                background-color: #f8f9fa;
            }}
        """)
        
        layout = QVBoxLayout(card)
        
        # T√≠tulo
        title_label = QLabel(title)
        title_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                color: #7f8c8d;
                font-weight: bold;
            }
        """)
        layout.addWidget(title_label)
        
        # Valor (din√°mico)
        value_label = QLabel(value)
        value_label.setStyleSheet(f"""
            QLabel {{
                font-size: 28px;
                font-weight: bold;
                color: {color};
                padding: 5px 0px;
            }}
        """)
        value_label.setObjectName("value")
        layout.addWidget(value_label)
        
        # Subt√≠tulo (din√°mico)
        subtitle_label = QLabel(subtitle)
        subtitle_label.setStyleSheet("""
            QLabel {
                font-size: 12px;
                color: #95a5a6;
            }
        """)
        subtitle_label.setObjectName("subtitle")
        layout.addWidget(subtitle_label)
        
        layout.addStretch()
        return card
        
    def create_charts_section(self):
        """Crear secci√≥n de gr√°ficos con datos reales"""
        section = QGroupBox("üìà Estad√≠sticas de Uso")
        section.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 15px;
                background-color: white;
                min-width: 400px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                color: #2c3e50;
            }
        """)
        
        layout = QVBoxLayout(section)
        
        # Gr√°ficos que se actualizar√°n con datos reales
        self.chart_consultas = self.create_consultas_chart()
        layout.addWidget(self.chart_consultas)
        
        self.chart_libros = self.create_libros_chart()
        layout.addWidget(self.chart_libros)
        
        return section
        
    def create_consultas_chart(self):
        """Gr√°fico de consultas por d√≠a"""
        chart = QFrame()
        chart.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #ecf0f1;
                border-radius: 6px;
                padding: 15px;
                margin: 5px;
            }
        """)
        
        layout = QVBoxLayout(chart)
        
        title_label = QLabel("üìä Consultas por D√≠a (√öltima Semana)")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #2c3e50;
                padding-bottom: 10px;
            }
        """)
        layout.addWidget(title_label)
        
        self.bars_container_consultas = QVBoxLayout()
        layout.addLayout(self.bars_container_consultas)
        
        return chart
        
    def create_libros_chart(self):
        """Gr√°fico de libros por estado"""
        chart = QFrame()
        chart.setStyleSheet("""
            QFrame {
                background-color: white;
                border: 1px solid #ecf0f1;
                border-radius: 6px;
                padding: 15px;
                margin: 5px;
            }
        """)
        
        layout = QVBoxLayout(chart)
        
        title_label = QLabel("üìö Libros por Estado")
        title_label.setStyleSheet("""
            QLabel {
                font-size: 14px;
                font-weight: bold;
                color: #2c3e50;
                padding-bottom: 10px;
            }
        """)
        layout.addWidget(title_label)
        
        self.bars_container_libros = QVBoxLayout()
        layout.addLayout(self.bars_container_libros)
        
        return chart
        
    def create_activity_section(self):
        """Crear secci√≥n de actividad reciente con datos reales"""
        section = QGroupBox("üïí Actividad Reciente")
        section.setStyleSheet("""
            QGroupBox {
                font-weight: bold;
                border: 1px solid #bdc3c7;
                border-radius: 8px;
                margin-top: 10px;
                padding-top: 15px;
                background-color: white;
                min-width: 350px;
            }
            QGroupBox::title {
                subcontrol-origin: margin;
                left: 10px;
                padding: 0 8px 0 8px;
                color: #2c3e50;
            }
        """)
        
        layout = QVBoxLayout(section)
        
        scroll_area = QScrollArea()
        scroll_area.setWidgetResizable(True)
        scroll_area.setStyleSheet("""
            QScrollArea {
                border: none;
                background-color: transparent;
            }
        """)
        
        self.activities_widget = QWidget()
        self.activities_layout = QVBoxLayout(self.activities_widget)
        self.activities_layout.setSpacing(5)
        
        scroll_area.setWidget(self.activities_widget)
        layout.addWidget(scroll_area)
        
        return section
        
    def create_activity_item(self, icon: str, text: str, time: str):
        """Crear un √≠tem de actividad"""
        item = QFrame()
        item.setStyleSheet("""
            QFrame {
                background-color: #f8f9fa;
                border: 1px solid #ecf0f1;
                border-radius: 6px;
                padding: 10px;
                margin: 2px;
            }
        """)
        
        layout = QHBoxLayout(item)
        
        icon_label = QLabel(icon)
        icon_label.setFixedWidth(30)
        
        text_label = QLabel(text)
        text_label.setStyleSheet("font-size: 13px; color: #2c3e50;")
        text_label.setWordWrap(True)
        
        time_label = QLabel(time)
        time_label.setStyleSheet("font-size: 11px; color: #95a5a6;")
        time_label.setAlignment(Qt.AlignRight)
        
        layout.addWidget(icon_label)
        layout.addWidget(text_label)
        layout.addWidget(time_label)
        
        return item

    def load_real_data(self):
        """Cargar datos reales desde la base de datos"""
        try:
            stats = self.db_manager.obtener_estadisticas()
            advanced_stats = self.db_manager.obtener_estadisticas_avanzadas()
            
            # Actualizar m√©tricas principales
            self.update_metric_card(self.metric_libros, str(stats['total_libros']), 
                                  f"{self.get_libros_este_mes()} este mes")
            
            self.update_metric_card(self.metric_consultas, str(stats['total_consultas']), 
                                  f"{self.get_consultas_esta_semana()} esta semana")
            
            self.update_metric_card(self.metric_fragmentos, str(stats['total_fragmentos']), 
                                  f"{advanced_stats.get('total_tokens', 0):,} tokens")
            
            espacio = advanced_stats.get('espacio_estimado_mb', 0)
            self.update_metric_card(self.metric_espacio, f"{espacio} MB", 
                                  "Base de datos SQLite")
            
            # Actualizar gr√°ficos
            self.update_consultas_chart()
            self.update_libros_chart()
            
            # Actualizar actividad reciente
            self.update_recent_activity()
            
        except Exception as e:
            print(f"‚ùå Error cargando datos del dashboard: {e}")

    def update_metric_card(self, card, new_value: str, new_subtitle: str = ""):
        """Actualizar los valores de una tarjeta de m√©trica"""
        value_label = card.findChild(QLabel, "value")
        subtitle_label = card.findChild(QLabel, "subtitle")
        
        if value_label:
            value_label.setText(new_value)
        if subtitle_label and new_subtitle:
            subtitle_label.setText(new_subtitle)

    def get_libros_este_mes(self):
        """Obtener n√∫mero de libros agregados este mes usando m√©todos existentes"""
        try:
            libros = self.db_manager.obtener_libros()
            inicio_mes = datetime.now().replace(day=1, hour=0, minute=0, second=0, microsecond=0)
            
            count = 0
            for libro in libros:
                fecha = libro.get('fecha_procesado')
                if fecha and fecha >= inicio_mes:
                    count += 1
            return count
        except:
            return 0

    def get_consultas_esta_semana(self):
        """Obtener n√∫mero de consultas esta semana usando m√©todos existentes"""
        try:
            # Por ahora retornar 0 ya que no hay m√©todo espec√≠fico para consultas por fecha
            # En una implementaci√≥n real, agregar√≠as este m√©todo a DatabaseManager
            return 0
        except:
            return 0

    def update_consultas_chart(self):
        """Actualizar gr√°fico de consultas usando m√©todos existentes"""
        self.clear_layout(self.bars_container_consultas)
        
        try:
            stats = self.db_manager.obtener_estadisticas()
            total_consultas = stats.get('total_consultas', 0)
            
            # Simular distribuci√≥n por per√≠odo (en una app real esto vendr√≠a de la BD)
            periodos = [
                ("Hoy", min(total_consultas, 5)),
                ("Ayer", min(total_consultas, 3)),
                ("Esta Semana", min(total_consultas, 8)),
                ("Este Mes", min(total_consultas, 15))
            ]
            
            for periodo, count in periodos:
                if total_consultas > 0:
                    self.add_bar_to_chart(self.bars_container_consultas, periodo, count, total_consultas)
                
        except Exception as e:
            print(f"‚ùå Error actualizando gr√°fico de consultas: {e}")

    def update_libros_chart(self):
        """Actualizar gr√°fico de libros usando m√©todos existentes"""
        self.clear_layout(self.bars_container_libros)
        
        try:
            libros = self.db_manager.obtener_libros()
            total_libros = len(libros)
            
            if total_libros == 0:
                # Mostrar mensaje cuando no hay libros
                empty_label = QLabel("üìö A√∫n no hay libros procesados")
                empty_label.setStyleSheet("font-size: 12px; color: #95a5a6; text-align: center;")
                self.bars_container_libros.addWidget(empty_label)
                return
            
            # Contar por estado
            estados_count = {}
            for libro in libros:
                estado = libro.get('estado', 'procesado')
                estados_count[estado] = estados_count.get(estado, 0) + 1
            
            # Crear barras para cada estado
            for estado, count in estados_count.items():
                self.add_bar_to_chart(self.bars_container_libros, estado.capitalize(), count, total_libros)
                
        except Exception as e:
            print(f"‚ùå Error actualizando gr√°fico de libros: {e}")

    def add_bar_to_chart(self, layout, label: str, value: int, max_value: int):
        """A√±adir una barra a un gr√°fico"""
        bar_container = QHBoxLayout()
        
        label_widget = QLabel(label)
        label_widget.setFixedWidth(80)
        label_widget.setStyleSheet("font-size: 11px; color: #7f8c8d;")
        
        bar = QProgressBar()
        percentage = min(int((value / max_value) * 100), 100) if max_value > 0 else 0
        bar.setValue(percentage)
        bar.setTextVisible(False)
        bar.setStyleSheet("""
            QProgressBar {
                border: 1px solid #bdc3c7;
                border-radius: 3px;
                background-color: #ecf0f1;
                height: 15px;
            }
            QProgressBar::chunk {
                background-color: #3498db;
                border-radius: 2px;
            }
        """)
        
        value_label = QLabel(str(value))
        value_label.setStyleSheet("font-size: 11px; color: #2c3e50; font-weight: bold;")
        value_label.setFixedWidth(30)
        
        bar_container.addWidget(label_widget)
        bar_container.addWidget(bar)
        bar_container.addWidget(value_label)
        
        layout.addLayout(bar_container)

    def update_recent_activity(self):
        """Actualizar actividad reciente usando m√©todos existentes"""
        self.clear_layout(self.activities_layout)
        
        try:
            libros = self.db_manager.obtener_libros()
            
            if not libros:
                # Mostrar mensaje cuando no hay actividad
                item = self.create_activity_item("üí°", "Agrega tu primer libro PDF para comenzar", "Ahora")
                self.activities_layout.addWidget(item)
                return
            
            # √öltimos 3 libros agregados
            for libro in libros[:3]:
                tiempo = self.format_time_ago(libro.get('fecha_procesado'))
                titulo = libro.get('titulo', 'Sin t√≠tulo')
                if len(titulo) > 40:
                    titulo = titulo[:37] + "..."
                item = self.create_activity_item("üì•", f"Libro agregado: '{titulo}'", tiempo)
                self.activities_layout.addWidget(item)
            
            # Mensaje informativo sobre consultas
            stats = self.db_manager.obtener_estadisticas()
            total_consultas = stats.get('total_consultas', 0)
            if total_consultas > 0:
                item = self.create_activity_item("üîç", f"Total de consultas realizadas: {total_consultas}", "Sistema")
                self.activities_layout.addWidget(item)
                
        except Exception as e:
            print(f"‚ùå Error actualizando actividad reciente: {e}")

    def format_time_ago(self, dt):
        """Formatear fecha como 'hace x tiempo'"""
        if not dt:
            return "Desconocido"
            
        now = datetime.now()
        diff = now - dt
        
        if diff.days > 0:
            return f"Hace {diff.days} d√≠as"
        elif diff.seconds > 3600:
            return f"Hace {diff.seconds // 3600} horas"
        elif diff.seconds > 60:
            return f"Hace {diff.seconds // 60} minutos"
        else:
            return "Hace un momento"

    def clear_layout(self, layout):
        """Limpiar todos los widgets de un layout"""
        while layout.count():
            child = layout.takeAt(0)
            if child.widget():
                child.widget().deleteLater()